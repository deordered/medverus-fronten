"use client"

import { useState } from "react"
import { 
  Search, 
  Clock, 
  FileText, 
  ExternalLink, 
  Copy, 
  Download,
  CheckCircle2,
  AlertTriangle,
  Sparkles,
  RefreshCw
} from "lucide-react"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { useToast } from "@/hooks/use-toast"
import { MEDICAL_SOURCE_CONFIG } from "@/lib/constants/medical"
import { formatProcessingTime, formatMedicalDate, truncateText } from "@/lib/utils"
import type { QueryResponse } from "@/types"

interface QueryResultsProps {
  results: QueryResponse | null
  isLoading: boolean
  currentQuery: string
  onNewQuery: () => void
}

export function QueryResults({ results, isLoading, currentQuery, onNewQuery }: QueryResultsProps) {
  const [copiedText, setCopiedText] = useState<string | null>(null)
  const { toast } = useToast()

  const handleCopyText = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedText(text)
      setTimeout(() => setCopiedText(null), 2000)
      
      toast({
        title: "Copied to clipboard",
        description: `${label} copied successfully`,
      })
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      })
    }
  }

  const handleDownloadResults = () => {
    if (!results) return

    const content = `
Medical Query Results - Medverus Platform
Generated: ${formatMedicalDate(results.timestamp)}

Query: ${results.query}
Source: ${MEDICAL_SOURCE_CONFIG[results.source]?.name}
Processing Time: ${formatProcessingTime(results.processing_time_ms)}

AI Response:
${results.response}

Search Results:
${results.results.map((result, index) => `
${index + 1}. ${result.title}
   Source: ${result.source}
   Relevance: ${(result.relevance_score * 100).toFixed(1)}%
   
   ${result.content}
   
   Citation: ${result.citation}
`).join('\n')}

Citations:
${results.citations.map((citation, index) => `${index + 1}. ${citation}`).join('\n')}

---
Generated by Medverus Medical AI Platform
This information is for educational purposes only and should not replace professional medical advice.
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `medverus-query-${results.query_id}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (isLoading) {
    return <QueryResultsSkeleton query={currentQuery} />
  }

  if (!results) {
    return null
  }

  const sourceConfig = MEDICAL_SOURCE_CONFIG[results.source]

  return (
    <div className="space-y-6">
      {/* Query Header */}
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="space-y-2">
              <CardTitle className="text-xl">Query Results</CardTitle>
              <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                <div className="flex items-center space-x-1">
                  <Clock className="h-4 w-4" />
                  <span>Processed in {formatProcessingTime(results.processing_time_ms)}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <FileText className="h-4 w-4" />
                  <span>{results.results.length} results</span>
                </div>
                <Badge variant="secondary">
                  {sourceConfig?.name || results.source}
                </Badge>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleDownloadResults}
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={onNewQuery}
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                New Query
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Original Query */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">Your Query:</Label>
            <div className="bg-muted p-3 rounded-lg">
              <p className="text-sm">{results.query}</p>
            </div>
            
            {results.user_prompt && (
              <div className="space-y-1">
                <Label className="text-sm font-medium">Additional Context:</Label>
                <div className="bg-muted p-3 rounded-lg">
                  <p className="text-sm">{results.user_prompt}</p>
                </div>
              </div>
            )}
          </div>

          {/* Safety Indicators */}
          <div className="flex items-center space-x-4 mt-4 pt-4 border-t">
            {results.safety_applied && (
              <div className="flex items-center space-x-1 text-green-600">
                <CheckCircle2 className="h-4 w-4" />
                <span className="text-sm">Medical safety filters applied</span>
              </div>
            )}
            {results.content_filtered && (
              <div className="flex items-center space-x-1 text-yellow-600">
                <AlertTriangle className="h-4 w-4" />
                <span className="text-sm">Content filtered for safety</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* AI Response */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-2">
              <Sparkles className="h-5 w-5 text-blue-600" />
              <span>AI-Generated Response</span>
            </CardTitle>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => handleCopyText(results.response, "AI response")}
            >
              {copiedText === results.response ? (
                <CheckCircle2 className="h-4 w-4 text-green-600" />
              ) : (
                <Copy className="h-4 w-4" />
              )}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="prose prose-sm max-w-none">
            <p className="text-sm leading-relaxed">{results.response}</p>
          </div>
        </CardContent>
      </Card>

      {/* Search Results */}
      <Card>
        <CardHeader>
          <CardTitle>Search Results ({results.results.length})</CardTitle>
        </CardHeader>
        <CardContent>
          <Accordion type="single" collapsible className="w-full">
            {results.results.map((result, index) => (
              <AccordionItem key={result.id} value={`item-${index}`}>
                <AccordionTrigger className="text-left">
                  <div className="flex items-start justify-between w-full mr-4">
                    <div className="space-y-1">
                      <h4 className="font-medium text-sm">{result.title}</h4>
                      <div className="flex items-center space-x-2 text-xs text-muted-foreground">
                        <span>{result.source}</span>
                        <span>â€¢</span>
                        <span>{(result.relevance_score * 100).toFixed(1)}% relevance</span>
                      </div>
                    </div>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-2">
                    {/* Content */}
                    <div className="prose prose-sm max-w-none">
                      <p className="text-sm leading-relaxed">{result.content}</p>
                    </div>

                    {/* Citation */}
                    <div className="space-y-2">
                      <Label className="text-xs font-medium text-muted-foreground">Citation:</Label>
                      <div className="bg-muted p-3 rounded-lg">
                        <p className="text-xs font-mono">{result.citation}</p>
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex items-center space-x-2 pt-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleCopyText(result.content, "Content")}
                      >
                        <Copy className="h-3 w-3 mr-1" />
                        Copy Content
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleCopyText(result.citation, "Citation")}
                      >
                        <Copy className="h-3 w-3 mr-1" />
                        Copy Citation
                      </Button>
                      {result.metadata?.url && (
                        <Button 
                          variant="outline" 
                          size="sm"
                          asChild
                        >
                          <a href={result.metadata.url} target="_blank" rel="noopener noreferrer">
                            <ExternalLink className="h-3 w-3 mr-1" />
                            View Source
                          </a>
                        </Button>
                      )}
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </CardContent>
      </Card>

      {/* Citations */}
      {results.citations.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Citations</CardTitle>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => handleCopyText(results.citations.join('\n\n'), "All citations")}
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {results.citations.map((citation, index) => (
                <div key={index} className="flex items-start space-x-3">
                  <span className="text-sm font-medium text-muted-foreground min-w-[1.5rem]">
                    {index + 1}.
                  </span>
                  <p className="text-sm font-mono leading-relaxed">{citation}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Medical Disclaimer */}
      <Card className="border-yellow-200 bg-yellow-50">
        <CardContent className="p-4">
          <div className="flex items-start space-x-2">
            <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-yellow-800">
              <p className="font-medium">Medical Disclaimer</p>
              <p className="mt-1">
                This AI-generated information is for educational purposes only and should not 
                replace professional medical advice, diagnosis, or treatment. Always consult 
                with qualified healthcare providers for medical decisions.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

function QueryResultsSkeleton({ query }: { query: string }) {
  return (
    <div className="space-y-6">
      {/* Header Skeleton */}
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="space-y-2">
              <Skeleton className="h-6 w-32" />
              <div className="flex items-center space-x-4">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-4 w-20" />
                <Skeleton className="h-5 w-16" />
              </div>
            </div>
            <div className="flex space-x-2">
              <Skeleton className="h-8 w-20" />
              <Skeleton className="h-8 w-20" />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <div className="bg-muted p-3 rounded-lg">
              <p className="text-sm">{query}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI Response Skeleton */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <Skeleton className="h-6 w-40" />
            <Skeleton className="h-8 w-8" />
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
          </div>
        </CardContent>
      </Card>

      {/* Results Skeleton */}
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-32" />
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {Array.from({ length: 3 }).map((_, i) => (
              <div key={i} className="border rounded-lg p-4">
                <Skeleton className="h-5 w-3/4 mb-2" />
                <Skeleton className="h-4 w-1/2 mb-3" />
                <div className="space-y-2">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-2/3" />
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}