# Docker Compose for Medverus AI Frontend
# Production-ready configuration with monitoring and security

version: '3.8'

services:
  # Main frontend application
  medverus-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: medverus-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_NAME=Medverus AI
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_API_URL=${API_URL:-https://medverus-backend.fly.dev}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_AUDIENCE=medverus-frontend
      - JWT_ISSUER=medverus-api
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://medverus.com}
    volumes:
      - ./logs:/app/logs
    networks:
      - medverus-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.medverus-frontend.rule=Host(`medverus.com`)"
      - "traefik.http.routers.medverus-frontend.tls=true"
      - "traefik.http.routers.medverus-frontend.tls.certresolver=letsencrypt"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: medverus-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - medverus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: medverus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - medverus-network
    depends_on:
      - medverus-frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: medverus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - medverus-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: medverus-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - medverus-network
    profiles:
      - monitoring

networks:
  medverus-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local